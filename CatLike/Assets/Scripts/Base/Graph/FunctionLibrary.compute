#pragma kernel WaveKernel
#pragma kernel WaveToMultiSineFunctionKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToCylinderKernel
#pragma kernel WaveToTorusKernel

#pragma kernel MultiSineFunctionToWaveKernel
#pragma kernel MultiSineFunctionKernel
#pragma kernel MultiSineFunctionToRippleKernel
#pragma kernel MultiSineFunctionToCylinderKernel
#pragma kernel MultiSineFunctionToTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiSineFunctionKernel
#pragma kernel RippleKernel
#pragma kernel RippleToCylinderKernel
#pragma kernel RippleToTorusKernel

#pragma kernel CylinderToWaveKernel
#pragma kernel CylinderToMultiSineFunctionKernel
#pragma kernel CylinderToRippleKernel
#pragma kernel CylinderKernel
#pragma kernel CylinderToTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToMultiSineFunctionKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToCylinderKernel
#pragma kernel TorusKernel

#define PI 3.14159265358979323846

RWStructuredBuffer<float3> _Positions;

uint _Resolution;

float _Step;
float _Time;
float _TransitionProgress;

float2 GetUV(uint3 id){
    return (id.xy + 0.5) * _Step - 1.0;
}

float3 Wave(float u, float v, float t){
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

float3 MultiSineFunction(float x, float z, float t)
    {
        float3 p;
        p.x = x;
        p.z = z;
        float y = sin(PI * (x + t));
        y += sin(2.0 * PI * (x + 2.0 * t)) / 2.0;
        y *= 2 / 3.0;
        p.y = y;
        return p;
    }

float3 Sine2DFunction(float x, float z, float t)
    {
        float3 p;
        p.x = x;
        p.z = z;
        p.y = sin(PI * (x + z + t));
        return p;
    }

float3 MultiSine2DFunction(float x, float z, float t)
    {
        float3 p;
        p.x = x;
        p.z = z;
        float y = 4.0 * sin(PI * (x + z + t * 0.5));
        y += sin(PI * (x + t));
        y += sin(2.0 * PI * (z + 2.0 * t) * 0.5);
        y *= 1.0 / 5.5;
        p.y = y;
        return p;
    }

float3 Ripple(float x, float z, float t)
    {
        float3 p;
        p.x = x;
        p.z = z;
        float d = sqrt(x * x + z * z);
        float y = sin(PI * (4.0 * d - t));
        y /= 1 + 10 * d;
        p.y = y;
        return p;
    }

float3 Cylinder(float u, float v, float t)
    {
        float r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t));
        float s = r * cos(0.5 * PI * v);
        float3 p;
        p.x = s * sin(PI * u);
        p.y = r * sin(PI * 0.5 * v);
        p.z = s * cos(PI * u);
        return p;
    }

float3 Torus(float u, float v, float t)
    {
        float r1 = 0.7 + 0.1 * sin(PI * (8.0 * u + 0.5 * t));
        float r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));
        float s = r1 + r2 * cos(PI * v);
        float3 p;
        p.x = s * sin(PI * u);
        p.y = r2 * sin(PI * v);
        p.z = s * cos(PI * u);
        return p;
    }

void SetPosition(uint3 id, float3 position){
    if (id.x < _Resolution && id.y < _Resolution){    
        _Positions[id.x + id.y * _Resolution] = position;
        }
}

#define KERNEL_FUNCTION(function) \
[numthreads(8,8,1)] \
void function##Kernel (uint3 id : SV_DispatchThreadID){ \
    float2 uv = GetUV(id); \
    SetPosition(id, function(uv.x, uv. y, _Time)); \
}

#define KERNEL_MOPH_FUNCTION(functionA, functionB) \
[numthreads(8,8,1)] \
void functionA##To##functionB##Kernel (uint3 id : SV_DispatchThreadID){ \
    float2 uv = GetUV(id); \
    float3 position = lerp( \
        functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time), \
        _TransitionProgress \
    ); \
    SetPosition(id, position); \
}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiSineFunction)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Cylinder)
KERNEL_FUNCTION(Torus)

KERNEL_MOPH_FUNCTION(Wave, MultiSineFunction);
KERNEL_MOPH_FUNCTION(Wave, Ripple);
KERNEL_MOPH_FUNCTION(Wave, Cylinder);
KERNEL_MOPH_FUNCTION(Wave, Torus);

KERNEL_MOPH_FUNCTION(MultiSineFunction, Wave);
KERNEL_MOPH_FUNCTION(MultiSineFunction, Ripple);
KERNEL_MOPH_FUNCTION(MultiSineFunction, Cylinder);
KERNEL_MOPH_FUNCTION(MultiSineFunction, Torus);

KERNEL_MOPH_FUNCTION(Ripple, Wave);
KERNEL_MOPH_FUNCTION(Ripple, MultiSineFunction);
KERNEL_MOPH_FUNCTION(Ripple, Cylinder);
KERNEL_MOPH_FUNCTION(Ripple, Torus);

KERNEL_MOPH_FUNCTION(Cylinder, Wave);
KERNEL_MOPH_FUNCTION(Cylinder, MultiSineFunction);
KERNEL_MOPH_FUNCTION(Cylinder, Ripple);
KERNEL_MOPH_FUNCTION(Cylinder, Torus);

KERNEL_MOPH_FUNCTION(Torus, Wave);
KERNEL_MOPH_FUNCTION(Torus, MultiSineFunction);
KERNEL_MOPH_FUNCTION(Torus, Ripple);
KERNEL_MOPH_FUNCTION(Torus, Cylinder);

